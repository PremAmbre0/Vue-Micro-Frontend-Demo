name: Auto Deploy on Changes

on:
  push:
    branches:
      - main
      - master

jobs:
  detect-changes:
    name: Detect Changes with Turbo
    runs-on: ubuntu-latest
    environment: production
    outputs:
      shell: ${{ steps.detect.outputs.shell }}
      demo-one: ${{ steps.detect.outputs.demo-one }}
      demo-two: ${{ steps.detect.outputs.demo-two }}
      demo-three: ${{ steps.detect.outputs.demo-three }}
      demo-counter: ${{ steps.detect.outputs.demo-counter }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Detect changes using Turbo
        id: detect
        run: |
          echo "🔍 Detecting changes with Turbo..."
          
          # Use Turbo to detect changes
          CHANGED=$(npx turbo run build --filter='...[HEAD^1]' --dry=json | jq -r '.tasks[].package' | grep -v "vite-federation-workspace" || true)
          
          if [ -z "$CHANGED" ]; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "shell=false" >> $GITHUB_OUTPUT
            echo "demo-one=false" >> $GITHUB_OUTPUT
            echo "demo-two=false" >> $GITHUB_OUTPUT
            echo "demo-three=false" >> $GITHUB_OUTPUT
            echo "demo-counter=false" >> $GITHUB_OUTPUT
          else
            echo "Changed packages detected:"
            echo "$CHANGED"
            
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Check each app
            if echo "$CHANGED" | grep -q "shell-app"; then
              echo "shell=true" >> $GITHUB_OUTPUT
              echo "✅ shell-app changed"
            else
              echo "shell=false" >> $GITHUB_OUTPUT
            fi
            
            if echo "$CHANGED" | grep -q "demo-one-app"; then
              echo "demo-one=true" >> $GITHUB_OUTPUT
              echo "✅ demo-one-app changed"
            else
              echo "demo-one=false" >> $GITHUB_OUTPUT
            fi
            
            if echo "$CHANGED" | grep -q "demo-two-app"; then
              echo "demo-two=true" >> $GITHUB_OUTPUT
              echo "✅ demo-two-app changed"
            else
              echo "demo-two=false" >> $GITHUB_OUTPUT
            fi
            
            if echo "$CHANGED" | grep -q "demo-three-app"; then
              echo "demo-three=true" >> $GITHUB_OUTPUT
              echo "✅ demo-three-app changed"
            else
              echo "demo-three=false" >> $GITHUB_OUTPUT
            fi

            if echo "$CHANGED" | grep -q "demo-counter-app"; then
              echo "demo-counter=true" >> $GITHUB_OUTPUT
              echo "✅ demo-counter-app changed"
            else
              echo "demo-counter=false" >> $GITHUB_OUTPUT
            fi
          fi



  deploy:
    name: Deploy to Vercel
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Clean previous builds
        run: |
          echo "🧹 Cleaning previous builds and virtual packages..."
          npm run clean || echo "Clean script not available, continuing..."
          rm -rf node_modules/__mf__virtual || echo "No virtual packages to clean"
          rm -rf dist || echo "No dist directory to clean"
          echo "✅ Cleanup completed"

      - name: Build All Apps
        run: |
          echo "🚀 Building all micro frontends using Turbo (sequential)..."
          echo "📦 Running: turbo run build --concurrency=1"
          npx turbo run build --concurrency=1
          echo ""
          echo "📋 Checking dist structure:"
          ls -la dist/ || echo "No dist directory found yet"
          echo ""
          echo "🎉 All apps built successfully!"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Debug Environment
        run: |
          echo "🔍 Debugging environment and secrets..."
          echo "Environment: production"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "VERCEL_TOKEN length: ${#VERCEL_TOKEN}"
          echo "VERCEL_ORG_ID length: ${#VERCEL_ORG_ID}"
          echo "VERCEL_PROJECT_ID length: ${#VERCEL_PROJECT_ID}"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Check Vercel Configuration
        run: |
          echo "🔍 Checking Vercel configuration..."
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "❌ VERCEL_TOKEN is not set or empty"
            echo "Token length: ${#VERCEL_TOKEN}"
            exit 1
          fi
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "❌ VERCEL_ORG_ID is not set or empty"
            exit 1
          fi
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "❌ VERCEL_PROJECT_ID is not set or empty"
            exit 1
          fi
          echo "✅ All Vercel secrets are configured"
          echo "Token length: ${#VERCEL_TOKEN}"
          echo "Org ID length: ${#VERCEL_ORG_ID}"
          echo "Project ID length: ${#VERCEL_PROJECT_ID}"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel
        run: |
          echo "🚀 Deploying to single Vercel project..."
          echo "📁 Deploying from dist directory with multiple app paths..."

          # Deploy the unified dist directory
          DEPLOYMENT_URL=$(vercel dist --prod --yes --token="$VERCEL_TOKEN")
          echo "✅ Deployment completed!"
          echo "🌐 Deployment URL: $DEPLOYMENT_URL"

          echo "📍 App URLs:"
          echo "   Shell App: $DEPLOYMENT_URL/shell-app"
          echo "   Demo One: $DEPLOYMENT_URL/demo-one-app"
          echo "   Demo Two: $DEPLOYMENT_URL/demo-two-app"
          echo "   Demo Three: $DEPLOYMENT_URL/demo-three-app"
          echo "   Demo Counter: $DEPLOYMENT_URL/demo-counter-app"

          # Save deployment URL for summary
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  summary:
    name: Deployment Summary
    needs: [detect-changes, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create Summary
        run: |
          echo "## 🚀 Auto Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.has_changes }}" == "false" ]; then
            echo "### ✅ No changes detected" >> $GITHUB_STEP_SUMMARY
            echo "No deployment needed - all apps are up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📦 Changed Apps Detected:" >> $GITHUB_STEP_SUMMARY

            if [ "${{ needs.detect-changes.outputs.shell }}" == "true" ]; then
              echo "- ✅ Shell App (changed)" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "${{ needs.detect-changes.outputs.demo-one }}" == "true" ]; then
              echo "- ✅ Demo One App (changed)" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "${{ needs.detect-changes.outputs.demo-two }}" == "true" ]; then
              echo "- ✅ Demo Two App (changed)" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "${{ needs.detect-changes.outputs.demo-three }}" == "true" ]; then
              echo "- ✅ Demo Three App (changed)" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "${{ needs.detect-changes.outputs.demo-counter }}" == "true" ]; then
              echo "- ✅ Demo Counter App (changed)" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ needs.deploy.result }}" == "success" ]; then
              echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
              echo "🌐 **Deployment URL:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📍 App URLs:" >> $GITHUB_STEP_SUMMARY
              echo "- [Shell App](${{ env.DEPLOYMENT_URL }}/shell-app)" >> $GITHUB_STEP_SUMMARY
              echo "- [Demo One App](${{ env.DEPLOYMENT_URL }}/demo-one-app)" >> $GITHUB_STEP_SUMMARY
              echo "- [Demo Two App](${{ env.DEPLOYMENT_URL }}/demo-two-app)" >> $GITHUB_STEP_SUMMARY
              echo "- [Demo Three App](${{ env.DEPLOYMENT_URL }}/demo-three-app)" >> $GITHUB_STEP_SUMMARY
              echo "- [Demo Counter App](${{ env.DEPLOYMENT_URL }}/demo-counter-app)" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.deploy.result }}" == "failure" ]; then
              echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
              echo "Please check the deployment logs for details." >> $GITHUB_STEP_SUMMARY
            else
              echo "### ⏭️ Deployment Skipped" >> $GITHUB_STEP_SUMMARY
              echo "Deployment was not triggered." >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 How it works:" >> $GITHUB_STEP_SUMMARY
          echo "- Turbo detects which apps have changes" >> $GITHUB_STEP_SUMMARY
          echo "- If changes found, all apps are rebuilt and deployed" >> $GITHUB_STEP_SUMMARY
          echo "- Single Vercel project with path-based routing" >> $GITHUB_STEP_SUMMARY