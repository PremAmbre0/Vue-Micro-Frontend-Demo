name: Auto Deploy Changed Apps

on:
  push:
    branches:
      - main
      - master

jobs:
  detect-changes:
    name: Detect Changes with Turbo
    runs-on: ubuntu-latest
    outputs:
      changed_apps: ${{ steps.detect.outputs.apps }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Detect changes using Turbo
        id: detect
        run: |
          echo "🔍 Detecting changes with Turbo..."

          # Use Turbo to detect changes
          CHANGED=$(npx turbo run build --filter='...[HEAD^1]' --dry=json | jq -r '.tasks[].package' | grep -v "vite-federation-workspace" || true)

          if [ -z "$CHANGED" ]; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "apps=" >> $GITHUB_OUTPUT
          else
            echo "Changed packages detected:"
            echo "$CHANGED"
            
            # Convert to space-separated string
            APPS=$(echo "$CHANGED" | tr '\n' ' ' | xargs)
            echo "apps=$APPS" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  deploy-changed:
    name: Deploy Changed Apps
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(format('[{0}]', contains(needs.detect-changes.outputs.changed_apps, ' ') && format('"{0}"', join(split(needs.detect-changes.outputs.changed_apps, ' '), '","')) || format('"{0}"', needs.detect-changes.outputs.changed_apps))) }}
      fail-fast: false
    steps:
      - name: Determine which workflow to call
        id: determine
        run: |
          APP="${{ matrix.app }}"
          echo "Deploying: $APP"

          # Map app names to workflow files
          case "$APP" in
            "shell-app")
              echo "workflow=deploy-shell.yml" >> $GITHUB_OUTPUT
              ;;
            "demo-one-app")
              echo "workflow=deploy-demo-one.yml" >> $GITHUB_OUTPUT
              ;;
            "demo-two-app")
              echo "workflow=deploy-demo-two.yml" >> $GITHUB_OUTPUT
              ;;
            "demo-three-app")
              echo "workflow=deploy-demo-three.yml" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown app: $APP"
              exit 1
              ;;
          esac

      - name: Trigger deployment
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = '${{ steps.determine.outputs.workflow }}';
            console.log(`Triggering ${workflow}`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow,
              ref: context.ref
            });

  # Alternative simpler approach - directly deploy in this workflow
  deploy-simple:
    name: Deploy Changed Apps (Simple)
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy changed apps
        run: |
          APPS="${{ needs.detect-changes.outputs.changed_apps }}"
          echo "📦 Deploying changed apps: $APPS"

          for app in $APPS; do
            if [ -d "$app" ]; then
              echo "🚀 Deploying $app..."
              cd $app
              vercel --prod --token="${{ secrets.VERCEL_TOKEN }}" --yes
              cd ..
              echo "✅ $app deployed"
            fi
          done
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Summary
        run: |
          echo "## 🚀 Auto Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed and Deployed:" >> $GITHUB_STEP_SUMMARY

          APPS="${{ needs.detect-changes.outputs.changed_apps }}"
          for app in $APPS; do
            case $app in
              "shell-app")
                echo "- ✅ [Shell App](https://shell-app-bice.vercel.app)" >> $GITHUB_STEP_SUMMARY
                ;;
              "demo-one-app")
                echo "- ✅ [Demo One](https://demo-one-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
                ;;
              "demo-two-app")
                echo "- ✅ [Demo Two](https://demo-two-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
                ;;
              "demo-three-app")
                echo "- ✅ [Demo Three](https://demo-three-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
                ;;
            esac
          done

  no-changes:
    name: No Changes Summary
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## ✅ No Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "No apps need deployment" >> $GITHUB_STEP_SUMMARY
