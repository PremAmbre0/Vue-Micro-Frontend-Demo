name: Deploy to Production

on:
  push:
    branches:
      - main
      - master

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  detect-changes:
    name: Detect Changed Apps
    runs-on: ubuntu-latest
    outputs:
      shell: ${{ steps.changes.outputs.shell }}
      demo-one: ${{ steps.changes.outputs.demo-one }}
      demo-two: ${{ steps.changes.outputs.demo-two }}
      demo-three: ${{ steps.changes.outputs.demo-three }}
      any-changed: ${{ steps.changes.outputs.any-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Detect changes using Turbo
        id: changes
        run: |
          echo "Detecting changes..."

          # Get changed packages
          CHANGED=$(npx turbo run build --filter='...[HEAD^1]' --dry=json | jq -r '.tasks[].package')

          echo "Changed packages: $CHANGED"

          # Check each app
          if echo "$CHANGED" | grep -q "shell-app"; then
            echo "shell=true" >> $GITHUB_OUTPUT
            echo "Shell app changed"
          else
            echo "shell=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED" | grep -q "demo-one-app"; then
            echo "demo-one=true" >> $GITHUB_OUTPUT
            echo "Demo one changed"
          else
            echo "demo-one=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED" | grep -q "demo-two-app"; then
            echo "demo-two=true" >> $GITHUB_OUTPUT
            echo "Demo two changed"
          else
            echo "demo-two=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED" | grep -q "demo-three-app"; then
            echo "demo-three=true" >> $GITHUB_OUTPUT
            echo "Demo three changed"
          else
            echo "demo-three=false" >> $GITHUB_OUTPUT
          fi

          # Check if anything changed
          if [ -n "$CHANGED" ]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
          else
            echo "any-changed=false" >> $GITHUB_OUTPUT
          fi

  deploy-demo-one:
    name: Deploy Demo One App
    needs: detect-changes
    if: needs.detect-changes.outputs.demo-one == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-one-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_ONE }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-one-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_ONE }}
          VITE_SHELL_REMOTE_ENTRY: ${{ secrets.VITE_SHELL_REMOTE_ENTRY }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-one-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_ONE }}

  deploy-demo-two:
    name: Deploy Demo Two App
    needs: detect-changes
    if: needs.detect-changes.outputs.demo-two == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-two-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_TWO }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-two-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_TWO }}
          VITE_SHELL_REMOTE_ENTRY: ${{ secrets.VITE_SHELL_REMOTE_ENTRY }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-two-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_TWO }}

  deploy-demo-three:
    name: Deploy Demo Three App
    needs: detect-changes
    if: needs.detect-changes.outputs.demo-three == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-three-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_THREE }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-three-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_THREE }}
          VITE_SHELL_REMOTE_ENTRY: ${{ secrets.VITE_SHELL_REMOTE_ENTRY }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./demo-three-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_THREE }}

  deploy-shell:
    name: Deploy Shell App
    needs: [detect-changes, deploy-demo-one, deploy-demo-two, deploy-demo-three]
    if: |
      always() && 
      needs.detect-changes.outputs.shell == 'true' &&
      !contains(needs.*.result, 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./shell-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_SHELL }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./shell-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_SHELL }}
          VITE_DEMO_ONE_REMOTE_ENTRY: ${{ secrets.VITE_DEMO_ONE_REMOTE_ENTRY }}
          VITE_DEMO_TWO_REMOTE_ENTRY: ${{ secrets.VITE_DEMO_TWO_REMOTE_ENTRY }}
          VITE_DEMO_THREE_REMOTE_ENTRY: ${{ secrets.VITE_DEMO_THREE_REMOTE_ENTRY }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./shell-app
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_SHELL }}

  summary:
    name: Deployment Summary
    needs:
      [
        detect-changes,
        deploy-shell,
        deploy-demo-one,
        deploy-demo-two,
        deploy-demo-three,
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.any-changed }}" == "false" ]; then
            echo "‚úÖ No changes detected - no deployments needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Changed Apps:" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.detect-changes.outputs.shell }}" == "true" ]; then
              echo "- Shell App: ${{ needs.deploy-shell.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ needs.detect-changes.outputs.demo-one }}" == "true" ]; then
              echo "- Demo One: ${{ needs.deploy-demo-one.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ needs.detect-changes.outputs.demo-two }}" == "true" ]; then
              echo "- Demo Two: ${{ needs.deploy-demo-two.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ needs.detect-changes.outputs.demo-three }}" == "true" ]; then
              echo "- Demo Three: ${{ needs.deploy-demo-three.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- üè† [Shell App](https://shell-app-bice.vercel.app)" >> $GITHUB_STEP_SUMMARY
          echo "- 1Ô∏è‚É£ [Demo One](https://demo-one-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
          echo "- 2Ô∏è‚É£ [Demo Two](https://demo-two-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
          echo "- 3Ô∏è‚É£ [Demo Three](https://demo-three-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
