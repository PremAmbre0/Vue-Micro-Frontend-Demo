name: Test Secrets and Environment

on:
  workflow_dispatch:

jobs:
  test-secrets:
    name: Test if Secrets are Accessible
    runs-on: ubuntu-latest
    steps:
      - name: Test Secret Existence
        run: |
          echo "🔍 Testing if secrets are set..."
          echo "======================================"

          # Test VERCEL_TOKEN
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "❌ VERCEL_TOKEN: NOT SET or EMPTY"
          else
            echo "✅ VERCEL_TOKEN: IS SET"
            # Show only length for security
            TOKEN_LENGTH=${#VERCEL_TOKEN}
            echo "   Token length: $TOKEN_LENGTH characters"
            # Show first 4 chars only (safely)
            MASKED_TOKEN="$(echo $VERCEL_TOKEN | cut -c1-4)..."
            echo "   Token preview: $MASKED_TOKEN"
          fi

          echo ""

          # Test VERCEL_ORG_ID
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "❌ VERCEL_ORG_ID: NOT SET or EMPTY"
          else
            echo "✅ VERCEL_ORG_ID: IS SET"
            echo "   Value: ${{ secrets.VERCEL_ORG_ID }}"
          fi

          echo ""

          # Test other secrets
          echo "Testing other secrets..."

          if [ -z "${{ secrets.VERCEL_PROJECT_ID_SHELL }}" ]; then
            echo "❌ VERCEL_PROJECT_ID_SHELL: NOT SET"
          else
            echo "✅ VERCEL_PROJECT_ID_SHELL: IS SET"
          fi

          if [ -z "${{ secrets.VERCEL_PROJECT_ID_DEMO_ONE }}" ]; then
            echo "❌ VERCEL_PROJECT_ID_DEMO_ONE: NOT SET"
          else
            echo "✅ VERCEL_PROJECT_ID_DEMO_ONE: IS SET"
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Test Environment Variable Access
        run: |
          echo "🔍 Testing environment variable access..."
          echo "======================================"

          # Method 1: Direct env var
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "✅ Method 1: VERCEL_TOKEN accessible via env"
            echo "   Length: ${#VERCEL_TOKEN}"
          else
            echo "❌ Method 1: VERCEL_TOKEN NOT accessible via env"
          fi

          if [ -n "$VERCEL_ORG_ID" ]; then
            echo "✅ Method 1: VERCEL_ORG_ID accessible via env"
            echo "   Value: $VERCEL_ORG_ID"
          else
            echo "❌ Method 1: VERCEL_ORG_ID NOT accessible via env"
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Test with Vercel CLI
        run: |
          echo "🔍 Testing with Vercel CLI..."
          echo "======================================"

          # Install Vercel CLI
          npm install -g vercel@latest

          # Check version
          echo "Vercel CLI version:"
          vercel --version

          echo ""

          # Try whoami with token
          echo "Testing 'vercel whoami' command:"
          vercel whoami 2>&1 || echo "Command failed with exit code $?"

          echo ""

          # Try with explicit token env var
          echo "Testing with explicit VERCEL_TOKEN export:"
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          vercel whoami 2>&1 || echo "Command failed with exit code $?"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Debug Token Format
        run: |
          echo "🔍 Checking token format..."
          echo "======================================"

          # Check if token has any special characters that might cause issues
          if [[ "$VERCEL_TOKEN" == *" "* ]]; then
            echo "⚠️ Token contains spaces"
          fi

          if [[ "$VERCEL_TOKEN" == *$'\n'* ]]; then
            echo "⚠️ Token contains newlines"
          fi

          if [[ "$VERCEL_TOKEN" == *$'\r'* ]]; then
            echo "⚠️ Token contains carriage returns"
          fi

          # Check token pattern (Vercel tokens usually start with specific patterns)
          if [[ "$VERCEL_TOKEN" == "" ]]; then
            echo "❌ Token is completely empty"
          elif [[ "$VERCEL_TOKEN" == *"null"* ]]; then
            echo "❌ Token contains 'null' string"
          elif [[ "$VERCEL_TOKEN" == *"undefined"* ]]; then
            echo "❌ Token contains 'undefined' string"
          else
            echo "✅ Token format looks normal"
          fi

          # Try base64 decode in case it's encoded
          echo ""
          echo "Checking if token might be base64 encoded:"
          echo "$VERCEL_TOKEN" | base64 -d 2>/dev/null && echo "⚠️ Token might be base64 encoded" || echo "✅ Token is not base64 encoded"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Test Different Vercel Commands
        run: |
          echo "🔍 Testing different Vercel command formats..."
          echo "======================================"

          # Method 1: No flags
          echo "1. vercel whoami (no flags):"
          vercel whoami 2>&1 || true

          echo ""

          # Method 2: With --token inline (your original attempt)
          echo "2. vercel whoami --token=\$VERCEL_TOKEN:"
          vercel whoami --token=$VERCEL_TOKEN 2>&1 || true

          echo ""

          # Method 3: With --token and value
          echo "3. vercel whoami --token \$VERCEL_TOKEN:"
          vercel whoami --token $VERCEL_TOKEN 2>&1 || true

          echo ""

          # Method 4: With quotes
          echo "4. vercel whoami --token=\"\$VERCEL_TOKEN\":"
          vercel whoami --token="$VERCEL_TOKEN" 2>&1 || true
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Create Summary
        if: always()
        run: |
          echo "## 🔍 Secrets Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "✅ VERCEL_TOKEN is set" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ VERCEL_TOKEN is NOT set or empty" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -n "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "✅ VERCEL_ORG_ID is set: ${{ secrets.VERCEL_ORG_ID }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ VERCEL_ORG_ID is NOT set or empty" >> $GITHUB_STEP_SUMMARY
          fi
