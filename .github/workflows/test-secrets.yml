name: Test Secrets Fixed

on:
  workflow_dispatch:

jobs:
  test-secrets:
    name: Test Secrets Access
    runs-on: ubuntu-latest
    steps:
      - name: Check if secrets are defined
        run: |
          echo "🔍 Checking if secrets are defined in GitHub..."
          echo "======================================"
          
          # This checks if the secret is defined (not its value)
          if [ "${{ secrets.VERCEL_TOKEN }}" != "" ]; then
            echo "✅ VERCEL_TOKEN is defined in GitHub Secrets"
          else
            echo "❌ VERCEL_TOKEN is NOT defined in GitHub Secrets"
          fi
          
          if [ "${{ secrets.VERCEL_ORG_ID }}" != "" ]; then
            echo "✅ VERCEL_ORG_ID is defined in GitHub Secrets"
            echo "   Value: ${{ secrets.VERCEL_ORG_ID }}"
          else
            echo "❌ VERCEL_ORG_ID is NOT defined in GitHub Secrets"
          fi

      - name: Test environment variables - Method 1
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "🔍 Testing with env at step level..."
          echo "======================================"
          
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "✅ VERCEL_TOKEN is accessible"
            echo "   Length: ${#VERCEL_TOKEN} characters"
            echo "   First 10 chars: ${VERCEL_TOKEN:0:10}..."
          else
            echo "❌ VERCEL_TOKEN is NOT accessible"
          fi
          
          if [ -n "$VERCEL_ORG_ID" ]; then
            echo "✅ VERCEL_ORG_ID is accessible"
            echo "   Value: $VERCEL_ORG_ID"
          else
            echo "❌ VERCEL_ORG_ID is NOT accessible"
          fi

      - name: Test environment variables - Method 2
        run: |
          echo "🔍 Testing with direct substitution..."
          echo "======================================"
          
          VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          VERCEL_ORG_ID="${{ secrets.VERCEL_ORG_ID }}"
          
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "✅ VERCEL_TOKEN is accessible via direct substitution"
            echo "   Length: ${#VERCEL_TOKEN} characters"
          else
            echo "❌ VERCEL_TOKEN is NOT accessible"
          fi
          
          if [ -n "$VERCEL_ORG_ID" ]; then
            echo "✅ VERCEL_ORG_ID is accessible via direct substitution"
            echo "   Value: $VERCEL_ORG_ID"
          else
            echo "❌ VERCEL_ORG_ID is NOT accessible"
          fi

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Test Vercel CLI with env vars
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "🔍 Testing Vercel CLI with environment variables..."
          echo "======================================"
          
          echo "Vercel version:"
          vercel --version
          
          echo ""
          echo "Test 1: vercel whoami (using env var)"
          vercel whoami || echo "Failed with exit code: $?"
          
          echo ""
          echo "Test 2: vercel list (using env var)"
          vercel list || echo "Failed with exit code: $?"

      - name: Test Vercel CLI with inline token
        run: |
          echo "🔍 Testing Vercel CLI with inline token..."
          echo "======================================"
          
          echo "Test 3: vercel whoami --token (space separated)"
          vercel whoami --token "${{ secrets.VERCEL_TOKEN }}" || echo "Failed with exit code: $?"
          
          echo ""
          echo "Test 4: vercel whoami --token= (equals sign)"
          vercel whoami --token="${{ secrets.VERCEL_TOKEN }}" || echo "Failed with exit code: $?"

      - name: Test with export
        run: |
          echo "🔍 Testing with export..."
          echo "======================================"
          
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export VERCEL_ORG_ID="${{ secrets.VERCEL_ORG_ID }}"
          
          echo "After export:"
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "✅ VERCEL_TOKEN is set"
          else
            echo "❌ VERCEL_TOKEN is NOT set"
          fi
          
          echo ""
          echo "Test 5: vercel whoami (after export)"
          vercel whoami || echo "Failed with exit code: $?"

      - name: Debug - Check actual values
        run: |
          echo "🔍 Debug: Checking actual secret values..."
          echo "======================================"
          
          # Check if secret is literally empty or contains placeholder text
          TOKEN="${{ secrets.VERCEL_TOKEN }}"
          ORG_ID="${{ secrets.VERCEL_ORG_ID }}"
          
          if [ "$TOKEN" = "" ]; then
            echo "❌ Token is completely empty string"
          elif [ "$TOKEN" = "null" ]; then
            echo "❌ Token is the string 'null'"
          elif [ "$TOKEN" = "undefined" ]; then
            echo "❌ Token is the string 'undefined'"
          elif [[ "$TOKEN" == *"***"* ]]; then
            echo "⚠️ Token contains masked characters (***)"
          else
            echo "✅ Token appears to have a real value"
            echo "   First 5 characters: ${TOKEN:0:5}"
            echo "   Token starts with: $(echo $TOKEN | cut -c1-2)..."
          fi
          
          echo ""
          echo "ORG_ID check:"
          echo "ORG_ID value: '$ORG_ID'"
          echo "Expected: 'prem-s-projects-734eda0f'"
          
          if [ "$ORG_ID" = "prem-s-projects-734eda0f" ]; then
            echo "✅ ORG_ID matches expected value"
          else
            echo "❌ ORG_ID does not match expected value"
          fi

      - name: Summary
        if: always()
        run: |
          echo "## 🔍 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the job logs for detailed results." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Check:" >> $GITHUB_STEP_SUMMARY
          
          VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          VERCEL_ORG_ID="${{ secrets.VERCEL_ORG_ID }}"
          
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "- ✅ VERCEL_TOKEN: Set (${#VERCEL_TOKEN} chars)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ VERCEL_TOKEN: Not set or empty" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "$VERCEL_ORG_ID" ]; then
            echo "- ✅ VERCEL_ORG_ID: $VERCEL_ORG_ID" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ VERCEL_ORG_ID: Not set or empty" >> $GITHUB_STEP_SUMMARY
          fi